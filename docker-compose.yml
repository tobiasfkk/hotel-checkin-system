services:

  booking-db:
    image: mysql:8.0
    container_name: booking-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: bookingdb
    ports:
      - "3307:3306"
    networks:
      - hotel-network

  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_DB: authdb
    ports:
      - "5432:5432"
    networks:
      - hotel-network

  auth-service:
    build: ./auth-service-php
    ports:
      - "8088:80" 
    depends_on:
      - auth-db
    volumes:
      - ./auth-service-php/src:/app
    networks:
      - hotel-network
    command: >
      sh -c "composer install --optimize-autoloader &&
            cp .env.example .env &&
            php artisan vendor:publish --provider='Knuckles\Scribe\ScribeServiceProvider' &&
            php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider" &&
            php artisan jwt:secret &&
            php artisan key:generate &&
            php artisan migrate &&
            php artisan scribe:generate &&
            php artisan serve --host=0.0.0.0 --port=80"

  booking-service:
    build: ./booking-service-php
    ports:
      - "8087:80" 
    depends_on:
      - booking-db  
    networks:
      - hotel-network
    volumes:
      - ./booking-service-php/src:/app
    command: >
      sh -c "composer install --optimize-autoloader &&
            cp .env.example .env &&
            php artisan vendor:publish --provider='Knuckles\Scribe\ScribeServiceProvider' &&
            php artisan key:generate &&
            php artisan migrate &&
            php artisan scribe:generate &&
            php artisan serve --host=0.0.0.0 --port=80"

  billing-service:
    build: ./billing-service-java
    expose:
      - "8083"
    networks:
      - hotel-network

  api-gateway:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway-java/src/main/resources/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - booking-service
      - billing-service
    networks:
      - hotel-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - sonarqube-db
    networks:
      - sonar-network
    restart: unless-stopped

  sonarqube-db:
    image: postgres:15
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql/data
    networks:
      - sonar-network
    restart: unless-stopped

  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    ports:
      - "8081:8081"
    environment:
      - NEXUS_SECURITY_RANDOMPASSWORD=false
    volumes:
      - nexus_data:/nexus-data
    networks:
      - nexus-network
    restart: unless-stopped

volumes:
  # Volumes para monitoramento
  grafana_data:
  prometheus_data:
  
  # Volumes para SonarQube
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  sonarqube_db:
  
  # Volume para Nexus
  nexus_data:

networks:
  hotel-network:
    driver: bridge
  monitoring:
    driver: bridge
  sonar-network:
    driver: bridge
  nexus-network:
    driver: bridge  