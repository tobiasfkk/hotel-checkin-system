services:

  # === APLICAÇÕES PRINCIPAIS ===
  booking-db:
    image: mysql:8.0
    container_name: booking-db-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: bookingdb
    ports:
      - "3309:3306"  # Porta diferente para produção
    networks:
      - hotel-network
    restart: unless-stopped
    volumes:
      - booking_db_prod:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=512M

  auth-db:
    image: postgres:15
    container_name: auth-db-prod
    environment:
      POSTGRES_PASSWORD: ${DB_AUTH_PASSWORD:-root}
      POSTGRES_DB: authdb
    ports:
      - "5434:5432"  # Porta diferente para produção
    networks:
      - hotel-network
    restart: unless-stopped
    volumes:
      - auth_db_prod:/var/lib/postgresql/data
    command: postgres -c 'shared_buffers=256MB' -c 'max_connections=100'

  auth-service:
    image: ${DOCKER_IMAGE_PREFIX:-hotelcheckin}/auth-service:${APP_VERSION:-latest}
    container_name: auth-service-prod
    expose:
      - "80"
    depends_on:
      - auth-db
    environment:
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_DATABASE=authdb
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_AUTH_PASSWORD:-root}
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
    networks:
      - hotel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  booking-service:
    image: ${DOCKER_IMAGE_PREFIX:-hotelcheckin}/booking-service:${APP_VERSION:-latest}
    container_name: booking-service-prod
    expose:
      - "80"
    depends_on:
      - booking-db
    environment:
      - DB_HOST=booking-db
      - DB_PORT=3306
      - DB_DATABASE=bookingdb
      - DB_USERNAME=root
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-root}
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
    networks:
      - hotel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  billing-service:
    image: ${DOCKER_IMAGE_PREFIX:-hotelcheckin}/billing-service:${APP_VERSION:-latest}
    container_name: billing-service-prod
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - LOGGING_LEVEL_ROOT=WARN
      - JAVA_OPTS=-Xms256m -Xmx512m -XX:+UseG1GC
    networks:
      - hotel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  api-gateway:
    image: ${DOCKER_IMAGE_PREFIX:-hotelcheckin}/api-gateway:${APP_VERSION:-latest}
    container_name: api-gateway-prod
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - booking-service
      - billing-service
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - AUTH_SERVICE_URL=http://auth-service:80
      - BOOKING_SERVICE_URL=http://booking-service:80
      - BILLING_SERVICE_URL=http://billing-service:8080
      - LOGGING_LEVEL_ROOT=WARN
    networks:
      - hotel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # === MONITORAMENTO ESSENCIAL ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'  # Retenção de 30 dias para produção
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'  # Compressão para economizar espaço
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
volumes:
  # Volumes persistentes para produção  
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  booking_db_prod:
    driver: local
  auth_db_prod:
    driver: local

networks:
  hotel-network:
    driver: bridge
  monitoring:
    driver: bridge  